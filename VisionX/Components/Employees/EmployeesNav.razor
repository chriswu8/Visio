@using VisionX.Components.Employees
@using VisionX.Services
@inject VisionX.Services.PdfService PdfService
@inject IJSRuntime JSRuntime
<link rel="stylesheet" href="/css/site.css" />

<div class="inner-nav">
    <button class="nav-underline" @onclick="ShowSignIn">Sign-In</button>
    <button class="nav-underline" @onclick="ShowSignOut">Sign-Out</button>
    <button class="nav-underline" @onclick="ShowTotalHours">Total Hours</button>
</div>

<br />

<div>
    @if (showSignIn)
    {
        <TheSignIn />
    }

    @if (showSignOut)
    {
        <TheSignOut />
    }

    @if (showTotalHours)
    {
        <TheTotalHours />
    }
</div>

@* <div class="employee-table">
    <table>
        <thead>
            <tr class="header-row">
                <th>EmployeeID</th>
                <th>Last Name</th>
                <th>First Name</th>
                <th>Middle Name</th>
                <th>Address</th>
                <th>Province</th>
                <th>City</th>
                <th>Postal Code</th>
                <th>Birth Date</th>
         
                <th>Phone</th>
                <th>Email</th>
                <th>Occupation</th>
                <th>ImageID</th>
            </tr>
        </thead>
        <tbody>
          
             @foreach (var employee in employees)
            {
                <tr class="@(employee.EmployeeID % 2 == 0 ? "even-row" : "odd-row") @(employee.IsSelected ? "selected-row" : "")" @onclick="() => SelectRow(employee)">

                   <td>@employee.EmployeeID</td>
                   <td>@employee.LastName</td>
                    <td>@employee.FirstName</td>
                    <td>@employee.MiddleName</td>
                   <td>@employee.Address</td>
                    <td>@employee.Province</td>
                    <td>@employee.City</td>
                    <td> @employee.PostalCode</td>
                    <td>@employee.BirthDate</td>
                    <td>@employee.Phone</td>
                    <td>@employee.Email</td>
                    <td>@employee.Occupation</td>
                     <td>@employee.ImageID</td>
                
                </tr>
            }
        </tbody>
    </table>
    </div> *@

    <div class="hours-table">
    <table>
        <thead>
            <tr class="header-row">
                <th>Employee</th>
                <th>Date</th>
                <th>Time In</th>
                <th>Time Out</th>
                <th>Total Hours Worked</th>
            </tr>
        </thead>


        <tbody>
          
             @foreach (var employee in employees)
            @* @foreach (var timeintimeout in timeintimeouts) *@

            {
                <tr class="@(employee.EmployeeID % 2 == 0 ? "even-row" : "odd-row") @(employee.IsSelected ? "selected-row" : "")" @onclick="() => SelectRow(employee)">
                     
                  <td>@employee.EmployeeID</td>
                    <td>@employee.Date</td>
                   <td>@employee.TimeIn</td>
                    <td>@employee.TimeOut</td>
                    <td>@employee.TotalHoursWorked</td>
                
                </tr>
            }
        </tbody>
    </table>
    </div>
    <button @onclick="ConvertToPdf">Convert to PDF</button>

@code {

    @* private async Task ConvertToPdf()
    {
    var html = "<html>http://localhost:8888/TheEmployees</html>"; // Replace this with your actual HTML
    var pdf = PdfService.ConvertHtmlToPdf(html);

    // Now you can do whatever you want with the PDF, e.g. download it
    var content = new System.IO.MemoryStream(pdf);
    var contentType = "APPLICATION/octet-stream";
    var fileName = "download.pdf";

    await JSRuntime.InvokeAsync<object>("saveAsFile", new object[] { fileName, Convert.ToBase64String(content.ToArray()) });
    } *@

    private async Task ConvertToPdf()
{
    var html = "<html>http://localhost:8888/TheEmployees</html>"; // Replace this with your actual HTML
    var pdf = PdfService.ConvertHtmlToPdf(html);

    // Now you can do whatever you want with the PDF, e.g. download it
    var content = new System.IO.MemoryStream(pdf);
    var contentType = "APPLICATION/octet-stream";
    var fileName = "download.pdf";
    await JSRuntime.InvokeAsync<object>("saveAsFile", new object[] { fileName, Convert.ToBase64String(content.ToArray()) });
}

    private bool showSignIn = true;
    private bool showSignOut = false;
    private bool showTotalHours = false;

    private void ShowSignIn()
    {
        showSignIn = true;
        showSignOut = false;
        showTotalHours = false;
    }

    private void ShowSignOut()
    {
        showSignIn = false;
        showSignOut = true;
        showTotalHours = false;
    }

    private void ShowTotalHours()
    {
        showSignIn = false;
        showSignOut = false;
        showTotalHours = true;
    }


}

<style>

    table {
    margin: 50px;
}

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000; /* Adjust z-index as needed */
    }

    .modal-container {
        transform: scale(0.9); /* Adjust the scale factor as needed */
        transform-origin: center;
        transition: transform 0.3s;
    }

    .modal-background {
        background-color: rgba(0, 0, 0, 0.5);
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
    }

    /* Add this for smooth scaling on hover */
    .modal-container:hover {
        transform: scale(1);
    }


    .patient-controls {
    @* .employee-controls { *@
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .employee-table {
        margin-top: 10px;
        @* width: 75%;
        margin: 0 auto; /* This will center the table */ *@
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: center;
    }

    .even-row {
        background-color: #f0f0f0;
        color: #000;
    }

    .odd-row {
        background-color: #d0d0d0;
    }

    .selected-row {
        background-color: red;
        color: white;
    }

    .header-row {
        background-color: #333;
        font-weight: bold;
        color: #fff;
    }

    .search-input {
        margin-left: 3em;
    }


</style>

@code{
    private List<TimeInTimeOut> employees = new List<TimeInTimeOut>
    {
       @* new TimeInTimeOut { EmployeeID = 1, Date = "2021-01-01", TimeIn = Convert.ToInt32(new TimeSpan(8, 0, 0).TotalHours), TimeOut = Convert.ToInt32(new TimeSpan(17, 0, 0).TotalHours), TotalHoursWorked = 9 },
       new TimeInTimeOut { EmployeeID = 2, Date = "2021-01-01", TimeIn = Convert.ToInt32(new TimeSpan(8, 0, 0).TotalHours), TimeOut = Convert.ToInt32(new TimeSpan(17, 0, 0).TotalHours), TotalHoursWorked = 9 } *@
      
      new TimeInTimeOut 
        { 
            EmployeeID = 1, 
            Date = "2021-01-01", 
            TimeIn = Convert.ToInt32(new TimeSpan(9, 1, 2).TotalHours), 
            TimeOut = Convert.ToInt32(new TimeSpan(17, 0, 0).TotalHours), 
            TotalHoursWorked = Convert.ToInt32(new TimeSpan(17, 0, 0).TotalHours) - Convert.ToInt32(new TimeSpan(9, 1, 2).TotalHours)
        },

        new TimeInTimeOut 
        { 
            EmployeeID = 2, 
            Date = "2021-01-01", 
            TimeIn = Convert.ToInt32(new TimeSpan(8, 0, 0).TotalHours), 
            TimeOut = Convert.ToInt32(new TimeSpan(17, 0, 0).TotalHours), 
            TotalHoursWorked = Convert.ToInt32(new TimeSpan(17, 0, 0).TotalHours) - Convert.ToInt32(new TimeSpan(8, 0, 0).TotalHours)
        }
    }; 

    private int nextEmployeeID = 3;
    private bool isEditing = false;

        private void SelectRow(TimeInTimeOut employee)
    {
        foreach (var p in employees)
        {
            p.IsSelected = false;
        }

       employee.IsSelected = !employee.IsSelected;
    }

    public class TimeInTimeOut
    {
        public int EmployeeID { get; set; }
        @* public string LastName { get; set; } *@

         public string Date { get; set; }
        @* public string FirstName { get; set; } *@

         public int TimeIn{ get; set; }
        @* public string MiddleName { get; set; } *@

          public int TimeOut{ get; set; }
        @* public string Address { get; set; } *@

          public int TotalHoursWorked{ get; set; }
        public bool IsSelected { get; set; }
        public bool IsEditing { get; set; }
    }

    } 

