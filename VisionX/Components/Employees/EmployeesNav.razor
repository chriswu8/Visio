@using VisionX.Components.Employees
<link rel="stylesheet" href="/css/site.css" />

<div class="inner-nav">
    <button class="nav-underline" @onclick="ShowSignIn">Sign-In</button>
    <button class="nav-underline" @onclick="ShowSignOut">Sign-Out</button>
    <button class="nav-underline" @onclick="ShowTotalHours">Total Hours</button>
</div>

<br />

<div>
    @if (showSignIn)
    {
        <TheSignIn />
    }

    @if (showSignOut)
    {
        <TheSignOut />
    }

    @if (showTotalHours)
    {
        <TheTotalHours />
    }
</div>

<div class="employee-table">
    <table>
        <thead>
            <tr class="header-row">
                <th>EmployeeID</th>
                <th>Last Name</th>
                <th>First Name</th>
                <th>Middle Name</th>
                <th>Address</th>
                <th>Province</th>
                <th>City</th>
                <th>Postal Code</th>
                <th>Birth Date</th>
         
                <th>Phone</th>
                <th>Email</th>
                <th>Occupation</th>
                <th>ImageID</th>
            </tr>
        </thead>
        <tbody>
          
             @foreach (var employee in employees)
            {
                <tr class="@(employee.EmployeeID % 2 == 0 ? "even-row" : "odd-row") @(employee.IsSelected ? "selected-row" : "")" @onclick="() => SelectRow(employee)">

                   <td>@employee.EmployeeID</td>
                   <td>@employee.LastName</td>
                    <td>@employee.FirstName</td>
                    <td>@employee.MiddleName</td>
                   <td>@employee.Address</td>
                    <td>@employee.Province</td>
                    <td>@employee.City</td>
                    <td> @employee.PostalCode</td>
                    <td>@employee.BirthDate</td>
                    <td>@employee.Phone</td>
                    <td>@employee.Email</td>
                    <td>@employee.Occupation</td>
                     <td>@employee.ImageID</td>
                
                </tr>
            }
        </tbody>
    </table>
    </div>

@code {
    private bool showSignIn = true;
    private bool showSignOut = false;
    private bool showTotalHours = false;

    private void ShowSignIn()
    {
        showSignIn = true;
        showSignOut = false;
        showTotalHours = false;
    }

    private void ShowSignOut()
    {
        showSignIn = false;
        showSignOut = true;
        showTotalHours = false;
    }

    private void ShowTotalHours()
    {
        showSignIn = false;
        showSignOut = false;
        showTotalHours = true;
    }
}

<style>

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000; /* Adjust z-index as needed */
    }

    .modal-container {
        transform: scale(0.9); /* Adjust the scale factor as needed */
        transform-origin: center;
        transition: transform 0.3s;
    }

    .modal-background {
        background-color: rgba(0, 0, 0, 0.5);
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
    }

    /* Add this for smooth scaling on hover */
    .modal-container:hover {
        transform: scale(1);
    }


    .patient-controls {
    @* .employee-controls { *@
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .employee-table {
        margin-top: 10px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: center;
    }

    .even-row {
        background-color: #f0f0f0;
        color: #000;
    }

    .odd-row {
        background-color: #d0d0d0;
    }

    .selected-row {
        background-color: red;
        color: white;
    }

    .header-row {
        background-color: #333;
        font-weight: bold;
        color: #fff;
    }

    .search-input {
        margin-left: 3em;
    }


</style>

@code{
    private List<Employee> employees = new List<Employee>
    {
        new Employee { EmployeeID = 1, LastName = "Doe", FirstName = "John", MiddleName = "Jake", Address = "123 Main St", Province = "BC", City = "Richmond", PostalCode = "V6Y9U4", BirthDate = "1990-01-01", Phone = "123-456-7890", Email = "johndoe@example.com", Occupation = "Engineer", ImageID = "VXE1" },
        new Employee { EmployeeID = 2, LastName = "Smith", FirstName = "Jane", MiddleName = "Amber", Address = "456 Elm St", Province = "BC", City = "Burnaby", PostalCode = "V8Y1X3", BirthDate = "1985-05-15", Phone = "987-654-3210", Email = "janesmith@example.com", Occupation = "Doctor", ImageID = "VXE2" }
    }; 

    private int nextEmployeeID = 3;
    private bool isEditing = false;

        private void SelectRow(Employee employee)
    {
        foreach (var p in employees)
        {
            p.IsSelected = false;
        }

       employee.IsSelected = !employee.IsSelected;
    }

    public class Employee
    {
        public int EmployeeID { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public string MiddleName { get; set; }
        public string Address { get; set; }
        public string Province { get; set; }
        public string City { get; set; }
        public string PostalCode { get; set; }
        public string BirthDate { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string Occupation { get; set; }
        public string ImageID { get; set; }

        public bool IsSelected { get; set; }
        public bool IsEditing { get; set; }
    }

}