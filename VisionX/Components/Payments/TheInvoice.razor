@inject VisionX.Services.InvoiceService invoiceService

<!-- TheInvoice.razor -->
<div class="invoice-modal">
    <div class="left-panel">
        <!-- Grey box for displaying services -->
        <div class="service-box">
            <table>
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Description</th>
                        <th>Fee</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ServiceList != null)
                    {
                        foreach (var service in ServiceList)
                        {
                            foreach (var invoice in InvoiceList)
                            {
                                if (invoice.ServiceID == service.Id)
                                {
                                    <tr @onclick="() => SelectService(service, invoice.ID)" class="@GetRowClass(service)">
                                        <td>@invoice.ID</td>
                                        <td>@service.Id</td>
                                        <td>@service.Description</td>
                                        <td>@service.Fee</td>
                                    </tr>
                                }
                            }
                        }
                    }
                </tbody>
            </table>
            <table>
                <thead>
                    <tr>
                        <th>Model Number</th>
                        <th>Manufacturer</th>
                        <th>Fee</th>
                    </tr>
                </thead>
                <tbody>
                    @if (ProductList != null)
                    {
                        foreach (var product in ProductList)
                        {
                            foreach (var invoice in InvoiceList)
                            {
                                if (invoice.ProductID == product.ID)
                                {
                                    <tr @onclick="() => SelectProduct(product, invoice.ID)" class="@GetRowClass(product)">
                                        <td>@invoice.ID</td>
                                        <td>@product.ModelNumber</td>
                                        <td>@product.Manufacturer</td>
                                        <td>@product.Fee</td>
                                    </tr>
                                }
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="empty-space"></div> <!-- Empty space between panels -->

    <div class="right-panel">
        <button class="visionX-button">Make a new invoice</button>
        <button class="visionX-button" @onclick="ShowTakePayment">Take a payment</button>
        <button class="visionX-button">Print Receipt</button>

        <h4>Patient's Balance</h4>

        <!-- Light blue textbox for notes -->
        <div type="text" class="notes-textbox"> @TotalFee </div>

        <button class="visionX-button exit-button" @onclick="HideModal">Exit</button>
    </div>

    @if (openProductModal)
    {
        <!-- Modal overlay -->
        <div class="modal-overlay">
            <!-- TheInvoice modal component -->
            <TheTakePaymentProduct OnSavePaymentClicked="HandlePaymentSave" OnExitPaymentClicked="HandlePaymentExit"
                SelectedProduct="@SelectedProduct" invoiceID="@this.invoiceID"/>
        </div>
    }
    else if (openServiceModal)
    {
        <div class="modal-overlay">
            <!-- TheInvoice modal component -->
            <TheTakePayment OnSavePaymentClicked="HandlePaymentSave" OnExitPaymentClicked="HandlePaymentExit"
                SelectedService="@SelectedService" invoiceID="@this.invoiceID"/>
        </div>
    }

</div>

<style>
    .invoice-modal {
        display: flex;
        justify-content: space-between;
        border: 1px solid #fff;
        background-color: #f5f5f5;
        padding: 20px;
    }

    .left-panel {
        width: 65%;
    }

    .right-panel {
        width: 35%;
    }

    .left-panel p,
    .right-panel h4 {
        display: inline;
        margin: 0;
        padding: 0 10px;
    }

    .empty-space {
        width: 5%;
        /* Adjust the width as needed */
    }

    .service-box {
        background-color: #ccc;
        padding: 10px;
    }

    .service-box ul {
        list-style-type: none;
    }

    .service-box li {
        margin-bottom: 10px;
    }

    .notes-textbox {
        background-color: #c7e1f7;
        /* Light blue background */
        padding: 10px;
        width: 100%;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .exit-button {
        margin-top: 20px;
    }

    .service-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .product-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

    th,
    td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    .selected-row {
        background-color: #a4a4a4;
    }
</style>



@code {
    [Parameter] public EventCallback OnExitClicked { get; set; }

    [Parameter]
    public VisionX.Models.Patient SelectedPatient { get; set; }
    public List<VisionX.Models.Invoice> InvoiceList { get; set; }
    private List<VisionX.Models.Service> ServiceList { get; set; } = null;
    private List<VisionX.Models.Product> ProductList { get; set; } = null;
    private bool showInvoiceModal;

    private decimal TotalFee { get; set; } = 0;

    public VisionX.Models.Service SelectedService { get; set; } = null;

    public VisionX.Models.Product SelectedProduct { get; set; } = null;

    public object selectedRow;

    public bool openServiceModal = false;
    public bool openProductModal = false;

    private int invoiceID;


    protected override async void OnInitialized()
    {
        @* var result = await invoiceService.GetServicesAndProductsByPatient(SelectedPatient.PatientID);

ServiceList = result.services;
ProductList = result.products; *@

        var result = await invoiceService.GetServicesAndProductsByPatient(SelectedPatient.PatientID);

        ServiceList = result.services;
        ProductList = result.products;
        InvoiceList = result.invoices;

        //TotalFee = await invoiceService.CalculateTotalFeeByPatient(SelectedPatient.PatientID);


        StateHasChanged();
    }

    @* private void SelectService(VisionX.Models.Service service)
{

}

private void SelectProduct(VisionX.Models.Product product)
{

} *@


    private async Task HideModal()
    {
        // Emit the OnCancelClicked event
        await OnExitClicked.InvokeAsync();
    }

    // =========================================

    private bool showTakePayment = false;

    private void ShowTakePayment()
    {
        showTakePayment = true;
        if (SelectedService != null)
        {
            openServiceModal = true;
        }
        else if (SelectedProduct != null)
        {
            openProductModal = true;
        }
    }

    private void HandlePaymentExit()
    {
        showTakePayment = false;
        openServiceModal = false;
        openProductModal = false;
        SelectedService = null;
        SelectedProduct = null;
    }

    private void HandlePaymentSave()
    {
        // Handle the save action here

        showTakePayment = false;
    }

    private string GetRowClass(object item)
    {
        return selectedRow == item ? "selected-row" : "";
    }

    private void SelectService(VisionX.Models.Service service, int invoiceID)
    {
        SelectedService = service;
        selectedRow = service;
        this.invoiceID = invoiceID;
        Console.WriteLine(this.invoiceID);
        @* openServiceModal = true;
openProductModal = false; *@
        // Handle the selection logic or emit an event if needed
    }

    private void SelectProduct(VisionX.Models.Product product, int invoiceID)
    {
        SelectedProduct = product;
        selectedRow = product;
        this.invoiceID = invoiceID;
        @* openProductModal = true;
openServiceModal = false; *@
        // Handle the selection logic or emit an event if needed
    }



}