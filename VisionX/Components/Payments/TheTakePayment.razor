@inject VisionX.Services.InvoiceService invoiceService

<!-- ThePayment.razor -->
<div class="payment-modal">
    <div class="left-payment-panel">
        <h4 class="small-text">Code</h4>
        <input type="text" class="input-field" placeholder="Enter data" @bind="SelectedService.Code" />

        <h4 class="small-text">Fee</h4>
        <input type="text" class="input-field" placeholder="Enter date" @bind="SelectedService.Fee" />

        <h4 class="small-text">Description</h4>
        <input type="text" class="input-field" placeholder="Enter insurance details"
            @bind="SelectedService.Description" />

        <div class="payment-type">
            <h4 class="small-text">Payment Type</h4>
            <select class="input-field">
                <option value="credit">Credit Card</option>
                <option value="cash">Cash</option>
                <!-- Add more payment methods as needed -->
            </select>
            <input type="text" class="input-field small-input" @bind="FirstPaymentAmount" />
        </div>

        <div class="payment-type">
            <h4 class="small-text">2nd Payment Type</h4>
            <select class="input-field">
                <option value="credit">Credit Card</option>
                <option value="cash">Cash</option>
                <!-- Add more payment methods as needed -->
            </select>
            <input type="text" class="input-field small-input" @bind="SecondPaymentAmount" />
        </div>
    </div>

    <div class="right-payment-panel">
        <div class="black-box">
            <div class="payment-summary">
                <h3>Payment Summary</h3>
            </div>
            <div class="summary-details">
                <div class="left-column">
                    <p>Items/Services:</p>
                    <p>HST/GST:</p>
                    <p>PST:</p>
                    <p class="red-text">TOTAL:</p>
                </div>
                <div class="right-column">
                    <p>@SelectedService.Fee</p>
                    <p>@hst</p>
                    <p>@gst</p>
                    <p class="red-text">@total</p>
                </div>
            </div>
        </div>

        <div class="buttons">
            <button class="visionX-button payment-save-button" @onclick="HandlePayment">Save</button>
            <button class="visionX-button payment-exit-button" @onclick="OnExitPaymentClicked">Exit</button>
        </div>
    </div>
</div>

<style>
    .payment-modal {
        display: flex;
        background-color: #ddd;
        color: #000;
    }

    .left-payment-panel {
        width: 47%;
        padding: 20px;
    }

    .right-payment-panel {
        width: 53%;
        padding: 20px;
    }

    .black-box {
        background-color: #000;
        color: #fff;
        min-width: 400px;
        min-height: 250px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }


    .small-text {
        font-size: 12px;
    }

    .input-field {
        width: 250px;
        padding: 5px;
        margin-top: 5px;
    }

    select.input-field {
        width: 250px;
        padding: 5px;
        margin-top: 5px;
    }

    .small-input {
        width: 80px;
        height: 30px;
        text-align: right;
    }

    .red-text {
        color: red;
    }

    .payment-summary {
        text-align: center;
        margin: 10px;
    }

    .summary-details {
        display: flex;
        justify-content: space-between;
        margin: 25px;
        gap: 125px;
    }

    .left-column,
    .right-column {
        width: 35%;
    }

    .buttons {
        margin-top: 20px;
        display: flex;
    }

    .payment-save-button {
        margin-right: 10px;
        /* Add some spacing between the buttons */
    }
</style>

@code {
    [Parameter] public EventCallback OnExitPaymentClicked { get; set; }
    [Parameter] public EventCallback OnSavePaymentClicked { get; set; }

    [Parameter]
    public VisionX.Models.Service SelectedService { get; set; }

    public VisionX.Models.Invoice SelectedInvoiceObject {get; set;}

    [Parameter]
    public int invoiceID { get; set; }

    public int SelectedInvoice { get; set; }

    private decimal? hst = 0;
    private decimal? gst = 0;
    private decimal? total = 0;
    private decimal FirstPaymentAmount { get; set; } = 0.00m;
    private decimal SecondPaymentAmount { get; set; } = 0.00m;


    protected override async void OnInitialized()
    {
        SelectedInvoiceObject = await invoiceService.GetInvoiceById(invoiceID);
        hst = Math.Round((decimal)(SelectedInvoiceObject.Fee * 0.05), 2);
        gst = Math.Round((decimal)(SelectedInvoiceObject.Fee * 0.07), 2);
        total = SelectedInvoiceObject.Fee + hst + gst;
    }

    private bool showPaymentModal;

    private async Task HandlePayment()
    {
        decimal paymentTotal = FirstPaymentAmount + SecondPaymentAmount;
        if (paymentTotal >= SelectedInvoiceObject.Fee)
        {
            //Console.WriteLine(SelectedProduct.ID);
            //ProductService.DeleteProduct(SelectedProduct.ID);
            await invoiceService.MarkInvoiceAsPaid(invoiceID);
        }
        else
        {
            //Console.WriteLine(SelectedService.Fee);
            await invoiceService.UpdateInvoiceFee(invoiceID, (int)(SelectedInvoiceObject.Fee - paymentTotal));
            SelectedInvoiceObject = await invoiceService.GetInvoiceById(invoiceID);
        }
        
        OnExitPaymentClicked.InvokeAsync();
    }

    private async Task HidePaymentModal()
    {
        // Emit the OnCancelClicked event
        await OnExitPaymentClicked.InvokeAsync();
    }


}
