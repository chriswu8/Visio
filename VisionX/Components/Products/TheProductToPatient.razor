@inject VisionX.Services.ServicesService ServicesService
@using VisionX.Models
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject VisionX.Services.ProductService ProductService
@inject Data.ApplicationDbContext dbContext
@inject VisionX.Services.InvoiceService invoiceService


<!-- TheAddNewService.razor -->
<div class="payment-modal">
    <div class="patient-buttons">
        <div class="patient-buttons1">
            <!-- <button class="book-button" @onclick="AddPatient">Add New Patient</button> -->
            <button class="book-button" @onclick="() => AddToPatientInvoice()">Add To Patient Invoice</button>
            <button class="book-button" @onclick="OnExitPaymentClicked">Close</button>
        </div>
    </div>
    <div class="patient-table">
        <table>
            <thead>
                <tr class="header-row">
                    <th>PatientID</th>
                    <th>Last Name</th>
                    <th>First Name</th>
                    <th>Middle Name</th>
                    <th>Sex</th>
                    <th>Address</th>
                    <th>Province</th>
                    <th>City</th>
                    <th>Postal Code</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var patient in patientsTest)
                {
                    <tr class="@(patient.PatientID % 2 == 0 ? "even-row" : "odd-row") @(patient.IsSelected ? "selected-row" : "") row-hover"
                        @onclick="() => SelectRow(patient)">
                        <td>@patient.PatientID</td>
                        <td>@patient.FirstName</td>
                        <td>@patient.LastName</td>
                        <td>@patient.MiddleName</td>
                        <td>@patient.Sex</td>
                        <td>@patient.Address</td>
                        <td>@patient.Province</td>
                        <td>@patient.City</td>
                        <td> @patient.PostalCode</td>
                        @* <td>
                    <button class="edit-button" @onclick="() => EditPatient(patient)">Edit</button>
                    </td>
                    <td>
                    <button class="delete-button" @onclick="() => DeletePatient(patient)">Delete</button>
                    </td> *@
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<style>
    .payment-modal {
        background-color: #ddd;
        color: #000;
    }

    .left-payment-panel {
        width: 47%;
        padding: 20px;
    }

    .right-payment-panel {
        width: 53%;
        padding: 20px;
    }

    .black-box {
        background-color: #000;
        color: #fff;
        min-width: 200px;
        min-height: 125px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }


    .small-text {
        font-size: 12px;
    }

    .input-field {
        width: 250px;
        padding: 5px;
        margin-top: 5px;
    }

    select.input-field {
        width: 250px;
        padding: 5px;
        margin-top: 5px;
    }

    .small-input {
        width: 80px;
        height: 30px;
        text-align: right;
    }

    .red-text {
        color: red;
    }

    .payment-summary {
        text-align: center;
        margin: 10px;
    }

    .summary-details {
        display: flex;
        justify-content: space-between;
        margin: 25px;
        gap: 125px;
    }

    .left-column,
    .right-column {
        width: 35%;
    }

    .buttons {
        margin-top: 20px;
        display: flex;
    }

    .payment-save-button {
        margin-right: 10px;
        /* Add some spacing between the buttons */
    }

    .patient-table {
        margin-top: 10px;
    }

    .even-row {
        background-color: #f0f0f0;
        color: #000;
    }

    .odd-row {
        background-color: #d0d0d0;
    }

    .header-row {
        background-color: #333;
        font-weight: bold;
        color: #fff;
    }

    .selected-row {
        background-color: rgb(23, 12, 39);
        color: white;
    }

    .patient-buttons {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2em;
    }

    .book-button {
        background-color: #f0f0f0;
        border: none;
        color: #333;
        padding: 10px;
        width: auto;
        text-align: center;
        cursor: pointer;
        border-radius: 5px;
        margin: 5px;
        line-height: 19px;
        transition: background-color 0.3s, color 0.3s;
    }
</style>

@code {
    [Parameter] public EventCallback OnExitPaymentClicked { get; set; }
    [Parameter] public EventCallback OnSavePaymentClicked { get; set; }

    [Parameter]
    public VisionX.Models.Product SelectedProduct { get; set; }

    @* [Parameter]
    public VisionX.Models.Patient SelectedPatient { get; set; } *@
    private bool showPaymentModal;

    private ElementReference serviceIdInput;
    private ElementReference serviceFeeInput;
    private ElementReference serviceDescriptionInput;

    private List<VisionX.Models.Patient> patientsTest;

    private VisionX.Models.Patient selectedPatient;


    private async Task HidePaymentModal()
    {
        //Emit the OnCancelClicked event
        await OnExitPaymentClicked.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        patientsTest = dbContext.Patients.ToList();
        selectedPatient = patientsTest[0];
    }


    private async Task SaveProduct()
    {
        string prodMan = await JSRuntime.InvokeAsync<string>("eval",
        "document.getElementById('productManufacturer').value");
        string prodModelNum = await JSRuntime.InvokeAsync<string>("eval",
        "document.getElementById('productModelNumber').value");
        string prodType = await JSRuntime.InvokeAsync<string>("eval",
        "document.getElementById('productType').value");
        string prodFee = await JSRuntime.InvokeAsync<string>("eval",
        "document.getElementById('productFee').value");

        Product newProduct = new Product
            {
                Manufacturer = prodMan,
                Type = prodType,
                ModelNumber = prodModelNum,
                Fee = Convert.ToInt32(prodFee)
            };

        ProductService.AddProduct(newProduct);
        await OnSavePaymentClicked.InvokeAsync();
    }

    private void SelectRow(VisionX.Models.Patient patient)
    {
        foreach (var p in patientsTest)
        {
            p.IsSelected = false;
        }

        patient.IsSelected = true;
        selectedPatient = patient;
    }

    private void AddToPatientInvoice()
    {
        @* Console.WriteLine(selectedPatient.FirstName);
Console.WriteLine(SelectedProduct.ID); *@
        DateTime currentDate = DateTime.Now;
        Invoice newInvoice = new Invoice
            {
                PatientID = selectedPatient.PatientID,
                Month = currentDate.Month.ToString(),
                Day = currentDate.Day.ToString(),
                Year = currentDate.Year.ToString(),
                Fee = SelectedProduct.Fee,
                ProductID = SelectedProduct.ID,
                IsPaid = false,
                ServiceID = null
            };

        invoiceService.AddInvoice(newInvoice);
        OnExitPaymentClicked.InvokeAsync();
    }
}