@inject VisionX.Services.AppointmentService AppointmentService
@using VisionX.Models


<div class="three-columns">
    <!-- Left Column -->
    <div class="column">
        <button class="today-button @(selectedInterval == 0 ? "selected" : "")"
            @onclick="() => ScheduleTime(0)">Today</button>
        <button class="tomorrow-button @(selectedInterval == 1 ? "selected" : "")"
            @onclick="() => ScheduleTime(1)">Tomorrow</button>
        <br /><br />
        <div class="left-buttons">
            <button id="btn1WeekToday" class="sub-button wk-button @(selectedInterval == 7 ? "selected" : "")"
                @onclick="() => ScheduleTime(7)">1 wk today</button>
            <button id="btn2WeeksToday" class="sub-button wk-button @(selectedInterval == 14 ? "selected" : "")"
                @onclick="() => ScheduleTime(14)">2 wk today</button>
        </div>
        <br />
        <div class="left-buttons no-gap">
            <button class="sub-button mo-button @(selectedInterval == 30 ? "selected" : "")"
                @onclick="() => ScheduleTime(30)">1 mo today</button>
            <button class="sub-button mo-button @(selectedInterval == 90 ? "selected" : "")"
                @onclick="() => ScheduleTime(90)">3 mo today</button>
            <button class="sub-button mo-button wide @(selectedInterval == 180 ? "selected" : "")"
                @onclick="() => ScheduleTime(180)">6 mo today</button>
        </div>
        <br /><br />
        <button class="year-button @(selectedInterval == 365 ? "selected" : "")" @onclick="() => ScheduleTime(365)">1yr
            today</button>
        <button class="year-button @(selectedInterval == 730 ? "selected" : "")" @onclick="() => ScheduleTime(730)">2yr
            today</button>
    </div>

    <!-- Middle Column -->
    <div class="column">
        <button class="month-button">January</button>
        <button class="month-button">February</button>
        <button class="month-button">March</button>
        <button class="month-button">April</button>
        <button class="month-button">May</button>
        <button class="month-button">June</button>
        <button class="month-button">July</button>
        <button class="month-button">August</button>
        <button class="month-button">September</button>
        <button class="month-button">October</button>
        <button class="month-button">November</button>
        <button class="month-button">December</button>
    </div>

    <!-- Right Column -->
    <div class="column">
        <button class="right-button">2023</button>
        <button class="right-button">2024</button>
        <button class="right-button">2025</button>

        <!-- Dumb method, perhaps replace w/ api??? -->
        <div class="calendar">
            @* <div class="calendar-header">December 2023</div>
            <div class="calendar-days">
            <div class="calendar-day calendar-header-day">Sun</div>
            <div class="calendar-day calendar-header-day">Mon</div>
            <div class="calendar-day calendar-header-day">Tue</div>
            <div class="calendar-day calendar-header-day">Wed</div>
            <div class="calendar-day calendar-header-day">Thu</div>
            <div class="calendar-day calendar-header-day">Fri</div>
            <div class="calendar-day calendar-header-day">Sat</div>
            <div class="calendar-day"></div>
            <div class="calendar-day"></div>
            <div class="calendar-day"></div>
            <div class="calendar-day"></div>
            <div class="calendar-day"></div>
            <div class="calendar-day">1</div>
            <div class="calendar-day">2</div>
            <div class="calendar-day">3</div>
            <div class="calendar-day">4</div>
            <div class="calendar-day">5</div>
            <div class="calendar-day">6</div>
            <div class="calendar-day">7</div>
            <div class="calendar-day">8</div>
            <div class="calendar-day">9</div>
            <div class="calendar-day">10</div>
            <div class="calendar-day">11</div>
            <div class="calendar-day">12</div>
            <div class="calendar-day">13</div>
            <div class="calendar-day">14</div>
            <div class="calendar-day">15</div>
            <div class="calendar-day">16</div>
            <div class="calendar-day">17</div>
            <div class="calendar-day">18</div>
            <div class="calendar-day">19</div>
            <div class="calendar-day">20</div>
            <div class="calendar-day">21</div>
            <div class="calendar-day">22</div>
            <div class="calendar-day">23</div>
            <div class="calendar-day">24</div>
            <div class="calendar-day">25</div>
            <div class="calendar-day">26</div>
            <div class="calendar-day">27</div>
            <div class="calendar-day">28</div>
            <div class="calendar-day">29</div>
            <div class="calendar-day">30</div>
            <div class="calendar-day">31</div>
            </div> *@
            <p>View all </p>
            <input type="date" data-date-inline-picker="true" @bind="calendarDate" @oninput="HandleDateSelection" />
        </div>
    </div>

    <div style=" center; align-items: center; height: 100%;">
        <ThePage TimeInString="@timeInString" Month="@month" Day="@day" Year="@year" />
        <div class="centered-appointment-section">
            <div class="appointment-section">
                <div class="appointments-table">
                    <table class="appointments-table">
                        <tr class="header-row">
                            <td class="header-cell">Time</td>
                            <td class="header-cell">Patient</td>
                            <td class="header-cell">Service</td>
                            <td class="header-cell">Contact</td>
                        </tr>

                        @for (int hour = 9; hour <= 16; hour++)
                        {
                            @for (int minute = 0; minute < 60; minute += 20)
                            {

                                var capturedHour = hour;
                                var capturedMinute = minute;
                                var combinedTime = $"{capturedHour}:{capturedMinute.ToString("00")}";

                                <tr class="appointment-row @GetRowClass(combinedTime)"
                                    @onclick="() => HandleRowClick(combinedTime)">
                                    <td>@combinedTime</td>
                                    @if (appointmentForDay != null)
                                    {
                                        @foreach (var appointment in appointmentForDay)
                                        {
                                            @if (appointment != null)
                                            {
                                                @if (appointment.Time == combinedTime)
                                                {
                                                    <td>@appointment.Patient.FirstName</td>
                                                    <td>@($"{appointment.Year}-{appointment.Month}-{appointment.Day} {appointment.Time}")</td>
                                                    <td>@appointment.Service.Description</td>
                                                }
                                            }
                                        }
                                    }
                                </tr>
                            }
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>




</div>


<style>
    .three-columns {
        display: flex;
        justify-content: space-between;
    }

    .column {
        flex: 1;
        padding: 10px;
        border-right: 1px solid #ccc;
    }

    .column:last-child {
        border-right: none;
    }

    .today-button,
    .tomorrow-button,
    .year-button {
        min-block-size: 11vh;
    }

    .tomorrow-button {
        margin-bottom: 5vh;
    }

    .wk-button,
    .mo-button {
        min-block-size: 9vh;
    }

    .today-button,
    .tomorrow-button,
    .wk-button,
    .mo-button,
    .year-button,
    .month-button,
    .right-button {
        background-color: #f0f0f0;
        border: none;
        color: #333;
        padding: 10px;
        margin-bottom: 5px;
        width: 100%;
        text-align: center;
        cursor: pointer;
        border-radius: 5px;
    }

    .right-button {
        min-block-size: 10vh;
    }

    .left-buttons {
        display: flex;
        gap: 5px;
    }

    .no-gap {
        gap: 5px;
    }

    .wk-button {
        flex: 1;
    }

    .mo-button {
        flex-basis: calc(30% - 5px);
    }

    .wide {
        flex-basis: calc(40%);
    }

    .calendar {
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        padding: 10px;
        margin-top: 20px;
    }

    .calendar-header {
        text-align: center;
        font-weight: bold;
        background-color: #333;
        color: #fff;
    }

    .calendar-header-day {
        background-color: #333;
        color: #fff;
    }

    .selected {
        background-color: red;
        /* Set your desired highlight color */
        color: white;
        /* Set the text color to be visible on the highlighted background */
        /* Add any other styles for the highlighted state */
    }

    .calendar-days {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 5px;
    }

    .calendar-day {
        text-align: center;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        padding: 5px;
        color: #333;
    }

    .centered-appointment-section {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: calc(100% - 60px);
    }

    .appointment-section {
        background-color: #f0f0f0;
        width: 30vw;
        height: 67vh;
        overflow-y: auto;
        padding: 10px;
        border-radius: 5px;
    }

    .appointments-table {
        width: 100%;
        gap: 10px;
        z-index: 1;
    }

    .header-row {
        background-color: #ccc;
        font-weight: bold;
    }

    .highlighted-row {
        background-color: grey;
        /* Add any other styling you want for the highlighted row */
    }

    .header-cell {
        padding: 8px;
        text-align: center;
    }

    .appointment-row:hover {
        background-color: grey;
        transition: background-color 0.5s ease;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: center;
    }


    .today-button:hover,
    .tomorrow-button:hover,
    .year-button:hover,
    .month-button:hover,
    .right-button:hover,
    .wk-button:hover,
    .mo-button:hover,
    .calendar-day:hover {
        background-color: #666;
        color: #fff;
        /* Text color on hover */
        transition: background-color 0.3s, color 0.3s;
    }
</style>


@code {
    private bool showModalPage = false;

    private string clickedRow = string.Empty;

    private int selectedInterval = 0;

    //private DateTime selectedTime;

    private DateTime selectedDateTime = DateTime.Now;
    private DateTime calendarDate = DateTime.Now;
    private string timeInString;
    private string month;
    private string day;
    private string year;

    private List<Appointment> appointmentsWithDetails;
    private List<Appointment> appointmentForDay;


    protected override void OnInitialized()
    {
        // Call the GetAppointmentsWithDetails method when the component is initialized
        appointmentsWithDetails = AppointmentService.GetAppointmentsWithDetails();
        @* appointmentForDay = HandleDateSelection(DateTime.Now); *@
        HandleDateSelection(DateTime.Now);
    }

    private void ScheduleTime(int dateInTheFuture)
    {
        DateTime currentDate = DateTime.Now;
        selectedDateTime = currentDate.AddDays(dateInTheFuture);
        selectedInterval = dateInTheFuture;
        HandleDateSelectionLeftCol(selectedDateTime);
        Console.WriteLine(selectedDateTime);
        //HandleDateSelection(selectedInterval);
    }

    private void HandleRowClick(string combinedTime)
    {
        clickedRow = combinedTime;
        // Handle the row click, you can use 'hour' and 'minute' as needed
        Console.WriteLine(combinedTime);
        //Console.WriteLine(selectedDateTime.ToString("yyyy-MM-dd"));
        @* this.combinedTime = combinedTime; *@
        string selectedYear = selectedDateTime.Year.ToString();
        string selectedMonth = selectedDateTime.Month.ToString("00");
        string selectedDay = selectedDateTime.Day.ToString("00");
        @* Console.WriteLine(selectedYear);
Console.WriteLine(selectedMonth);
Console.WriteLine(selectedDay); *@
        this.year = selectedYear;
        this.month = selectedMonth;
        this.day = selectedDay;
        this.timeInString = combinedTime;
        //this.selectedDateTime = selectedDateTime.ToString("yyyy-MM-dd");
        //OnRowClick.InvokeAsync((hour, minute));
    }

    private string GetRowClass(string combinedTime)
    {
        return combinedTime == clickedRow ? "highlighted-row" : string.Empty;
    }

    private void ShowModalPage()
    {
        showModalPage = true;
    }

    private void HandleDateSelectionLeftCol(DateTime calendarDate)
    {

        string selectedYear = calendarDate.Year.ToString();
        string selectedMonth = calendarDate.Month.ToString("d2");
        string selectedDay = calendarDate.Day.ToString("d2");
        appointmentForDay = AppointmentService.SearchAppointmentByDate(selectedYear,
        selectedMonth, selectedDay);
    }

    private void HandleDateSelection(DateTime calendarDate)
    {

        string selectedYear = DateTime.Now.Year.ToString();
        string selectedMonth = DateTime.Now.Month.ToString("d2");
        string selectedDay = DateTime.Now.Day.ToString("d2");
        appointmentForDay = AppointmentService.SearchAppointmentByDate(selectedYear,
        selectedMonth, selectedDay);
    }

    private void HandleDateSelection(ChangeEventArgs e)
    {
        // Parse the selected date from the input
        if (DateTime.TryParse(e.Value.ToString(), out DateTime calendarDate))
        {
            // Handle the selected date as needed
            @* Console.WriteLine("Selected Date: " + calendarDate.ToString("yyyy-MM-dd"));
Console.WriteLine(calendarDate.Year.ToString()) *@
            appointmentForDay = AppointmentService.SearchAppointmentByDate(calendarDate.Year.ToString(),
            calendarDate.Month.ToString("d2"), calendarDate.Day.ToString("d2"));

        }
    }
}
