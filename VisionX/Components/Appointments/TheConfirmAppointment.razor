@using VisionX.Models
@inject Data.ApplicationDbContext dbContext
@inject VisionX.Services.AppointmentService appointmentService
@inject VisionX.Services.InvoiceService invoiceService
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager



<div>
    <link rel="stylesheet" href="/css/site.css" />
    <div class="the-confirm-apt-modal-content">
        <div class="left-column">
            <p>Schedule appointment for <b>@SelectedPatientModel.FirstName @SelectedPatientModel.LastName</b>
            <p></p>
            <p>On: <b>@Year-@Month-@Day at @TimeInString</b></p>
            </p>

        </div>
        <div class="right-column">
            <span>Exam:</span>
            <select @onchange="HandleExamSelection">
                @foreach (var service in serviceList)
                {
                    <option value="@($"{service.Id}-{service.Fee}")">@service.Code</option>
                }
            </select>
        </div>
    </div>
    <div class="button-bar">
        @if (showCannotScheduleMessage)
        {
            <p class="apt-conflict-error-message" style="color: red;"><b>Scheduling conflict</b>: there already exists an
                appointment for this time slot.</p>
        }
        <button class="visionX-button" @onclick="OnSave">Save</button>
        <button class="visionX-button" @onclick="OnCancel">Cancel</button>
    </div>
</div>
<style>
    .the-confirm-apt-modal-content {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        max-height: 15em;
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 10px;
    }

    .apt-conflict-error-message {
        display: inline-block;
        color: #cc0000;
        border-radius: 5px;
        margin-right: 10px;
        margin-top: 10px;
        white-space: nowrap;
    }

    .left-column {
        flex: 1;
        margin-right: 20px;
    }

    .right-column {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .button-bar {
        display: flex;
        justify-content: flex-end;
        margin-top: 15px;
        margin-left: 33.5vw;
        width: 30vw;
    }

    .button-bar button {
        margin-left: 20px;
        padding: 8px 20px;
        border: none;
        background-color: #414446;
        color: #fff;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .button-bar button:hover {
        background-color: #2d2f31;
    }
</style>




@code {
    [Parameter] public EventCallback OnSaveClicked { get; set; }
    [Parameter] public EventCallback OnCancelClicked { get; set; }

    [Parameter] public EventCallback OnConfirmAppointmentSaveClicked { get; set; }
    [Parameter] public EventCallback OnConfirmAppointmentCancelClicked { get; set; }
    [Parameter] public string Month { get; set; }
    [Parameter] public string Day { get; set; }
    [Parameter] public string Year { get; set; }
    [Parameter] public string TimeInString { get; set; }
    [Parameter] public VisionX.Models.Patient SelectedPatientModel { get; set; }
    private List<VisionX.Models.Service> serviceList;
    private int selectedServiceId;
    private int serviceFee;

    private VisionX.Models.Service service;

    private void HandleExamSelection(ChangeEventArgs e)
    {
        string selectedValue = e.Value.ToString();
        // Parse the selected value to extract ID and Fee
        string[] parts = selectedValue.Split('-');
        int selectedId = int.Parse(parts[0]);
        int selectedFee = (int)decimal.Parse(parts[1]);

        // Now, you can use selectedId and selectedFee as needed
        Console.WriteLine($"Selected ID: {selectedId}, Selected Fee: {selectedFee}");

        selectedServiceId = selectedId;
        serviceFee = selectedFee;
    }

    protected override void OnInitialized()
    {
        serviceList = dbContext.Services.ToList();
        selectedServiceId = serviceList[0].Id;
        serviceFee = (int)serviceList[0].Fee;
    }


    private bool showCannotScheduleMessage = false;


    private async Task OnSave()
    {
        try
        {
            // Check if an appointment already exists for the selected time slot
            bool appointmentExists = dbContext.Appointments.Any(a =>
            a.Month == Month &&
            a.Day == Day &&
            a.Year == Year &&
            a.Time == TimeInString);

            if (appointmentExists)
            {
                // An appointment already exists for this time slot
                showCannotScheduleMessage = true;
            }
            else
            {
                // Create a new appointment and invoice
                var newAppointment = new VisionX.Models.Appointment
                    {
                        Month = Month,
                        Day = Day,
                        Year = Year,
                        Time = TimeInString,
                        PatientID = SelectedPatientModel.PatientID,
                        ServiceID = selectedServiceId
                    };

                var newInvoice = new VisionX.Models.Invoice
                    {
                        Month = Month,
                        PatientID = SelectedPatientModel.PatientID,
                        Day = Day,
                        Year = Year,
                        ServiceID = selectedServiceId,
                        Fee = serviceFee,
                        IsPaid = false,
                        ProductID = null
                    };

                // Add the new appointment and invoice if no conflicting appointment exists
                await appointmentService.AddAppointmentAsync(newAppointment);
                await invoiceService.AddInvoice(newInvoice);

                // Close the confirmation modal
                @* await OnCancel(); *@
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception: " + ex);
            // Handle the exception as needed
        }
    }


    private async Task OnCancel()
    {
        Console.WriteLine("Cancel button clicked.");

        // Emit the OnCancelClicked event
        await OnCancelClicked.InvokeAsync();
    }

    private async Task OnConfirmAppointmentSave()
    {
        // Emit the OnSaveClicked event
        await OnConfirmAppointmentSaveClicked.InvokeAsync();
    }

    private async Task OnConfirmAppointmentCancel()
    {
        // Emit the OnCancelClicked event
        await OnConfirmAppointmentCancelClicked.InvokeAsync();
    }
}