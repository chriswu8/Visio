@using VisionX.Models
@inject Data.ApplicationDbContext dbContext
@inject VisionX.Services.AppointmentService appointmentService



<div>
    <link rel="stylesheet" href="/css/site.css" />
    <div class="modal-content">
        <div class="left-column">
            @* <span>Date:</span>
            <input type="date" /><br /><br />
            <span>Time:</span>
            <input type="time" /> *@
            <p>Schedule appointment for @SelectedPatientModel.FirstName @SelectedPatientModel.LastName:
                @Year-@Month-@Day at @TimeInString</p>
        </div>
        <div class="right-column">
            <span>Exam:</span>
            <select @onchange="HandleExamSelection">
                @foreach (var service in serviceList)
                {
                    <option value="@service.Id">@service.Code</option>
                    <!-- Modify the value and text based on your Exam model -->
                }
            </select>
        </div>
    </div>
    <div class="button-bar">
        <button class="visionX-button" @onclick="OnSave">Save</button>
        <button class="visionX-button" @onclick="OnConfirmAppointmentCancelClicked">Cancel</button>
    </div>
</div>
<style>
    .modal-content {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        max-width: 45em;
        max-height: 15em;
    }

    .left-column {
        flex: 1;
        margin: 20px;
        margin-right: 10px;
        /* Adjust the margin to reduce space */
    }

    .right-column {
        flex: 1;
        display: flex;
        flex-direction: column;
        margin: 20px;
    }

    .button-bar {
        display: flex;
        justify-content: flex-end;
        align-items: right;
        /* Vertically align buttons in the middle */
        margin-top: 15px;
        margin-bottom: -5px;
    }

    .button-bar button {
        margin-left: 20px;
        /* Add margin between buttons */
        margin-bottom: -2px;
    }
</style>




@code {
    [Parameter] public EventCallback OnSaveClicked { get; set; }
    [Parameter] public EventCallback OnCancelClicked { get; set; }

    [Parameter] public EventCallback OnConfirmAppointmentSaveClicked { get; set; }
    [Parameter] public EventCallback OnConfirmAppointmentCancelClicked { get; set; }
    [Parameter] public string Month { get; set; }
    [Parameter] public string Day { get; set; }
    [Parameter] public string Year { get; set; }
    [Parameter] public string TimeInString { get; set; }
    [Parameter] public VisionX.Models.Patient SelectedPatientModel { get; set; }
    private List<VisionX.Models.Service> serviceList;
    private int selectedServiceId;

    private void HandleExamSelection(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var result))
        {
            selectedServiceId = result;
        }
        else
        {
            // Handle the case where the value cannot be parsed to an integer
        }
    }

    protected override void OnInitialized()
    {
        serviceList = dbContext.Services.ToList();
    }

    // Event handlers
    private async Task OnSave()
    {
        @* Console.WriteLine(Month);
        Console.WriteLine(Day);
        Console.WriteLine(Year);
        Console.WriteLine(TimeInString);
        Console.WriteLine(SelectedPatientModel.PatientID);
        Console.WriteLine(selectedExamId); *@
        // Emit the OnSaveClicked event
        var newAppointment = new VisionX.Models.Appointment
            {
                Month = Month,
                Day = Day,
                Year = Year,
                Time = TimeInString,
                PatientID = SelectedPatientModel.PatientID,
                ServiceID = selectedServiceId
            };

        await appointmentService.AddAppointmentAsync(newAppointment);

        //await OnSaveClicked.InvokeAsync();
        //await OnConfirmAppointmentSaveClicked.InvokeAsync();
    }

    private async Task OnCancel()
    {
        Console.WriteLine("Cancel button clicked.");

        // Emit the OnCancelClicked event
        await OnCancelClicked.InvokeAsync();
    }

    private async Task OnConfirmAppointmentSave()
    {
        // Emit the OnSaveClicked event
        await OnConfirmAppointmentSaveClicked.InvokeAsync();
    }

    private async Task OnConfirmAppointmentCancel()
    {
        // Emit the OnCancelClicked event
        await OnConfirmAppointmentCancelClicked.InvokeAsync();
    }
}