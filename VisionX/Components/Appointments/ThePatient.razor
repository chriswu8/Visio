@using VisionX.Models
@using Microsoft.EntityFrameworkCore
@inject Data.ApplicationDbContext dbContext
@inject VisionX.Services.PatientService _patientService
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<link rel="stylesheet" href="/css/site.css" />

<div class="patient-controls">
    <div class="search-bar">
        <div class="buttons-top">
            <button>Last Name</button>
            <button>PHN</button>
            <button>Phone</button>
        </div>
        <input class="search-input" type="text" placeholder="Search..." />
    </div>
</div>
<hr />
<div class="patient-buttons">
    <div class="patient-buttons1">
        <!-- <button class="book-button" @onclick="AddPatient">Add New Patient</button> -->
        <button class="book-button" @onclick="ShowPatientInfoModal">Add New Patient</button>
    </div>
</div>

<div class="patient-table">
    <table>
        <thead>
            <tr class="header-row">
                <th>Last Name</th>
                <th>First Name</th>
                <th>Middle Name</th>
                <th>Address</th>
                <th>Province</th>
                <th>City</th>
                <th>Postal Code</th>
                <th>Birth Date</th>
                <th>PHN</th>
                <th colspan="2">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var patient in patientsTest)
            {
                <tr class="@(patient.PatientID % 2 == 0 ? "even-row" : "odd-row") @(patient.IsSelected ? "selected-row" : "") row-hover"
                    @onclick="() => SelectRow(patient)">
                    <td>@patient.FirstName</td>
                    <td>@patient.LastName</td>
                    <td>@patient.MiddleName</td>
                    <td>@patient.Address</td>
                    <td>@patient.Province</td>
                    <td>@patient.City</td>
                    <td> @patient.PostalCode</td>
                    <td>@patient.BirthDate</td>
                    <td>@patient.ProvincialHealthNumber</td>
                    <td>
                        <button class="edit-button" @onclick="() => EditPatient(patient)">Edit</button>
                    </td>
                    <td>
                        <button class="delete-button" @onclick="() => DeletePatient(patient)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (showPatientInfo)
    {
        <div class="modal-container">
            <div class="modal-background">
                <div class="modal-content">
                    @if (patientEdit)
                    {
                        <ThePatientInfo OnSaveClicked="HandleSave" OnCancelClicked="HandleCancel"
                            SelectedPatient="selectedPatient" />
                    }
                    else
                    {
                        <TheAddPatientInfo OnSaveClicked="HandleSave" OnCancelClicked="HandleCancel" />
                    }

                </div>
            </div>
        </div>
    }


</div>

<style>
    .modal-container {
        transform: scale(0.9);
        transform-origin: center;
        transition: transform 0.3s;
    }

    .modal-background {
        background-color: rgba(0, 0, 0, 0.5);
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
    }

    /* Add this for smooth scaling on hover */
    .modal-container:hover {
        transform: scale(1);
    }


    .patient-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-bar {
        display: flex;
        align-items: center;
        margin-top: 2em;
    }

    .search-bar input[type="text"] {
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 23vw;
    }

    .buttons-top {
        display: flex;
        gap: 10px;
    }

    .buttons-top button {
        padding: 5px 10px;
        background-color: #f0f0f0;
        border: none;
        color: #333;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s, color 0.3s;
    }

    .buttons-top button:hover {
        background-color: #666;
        color: #fff;
    }

    .patient-table {
        margin-top: 10px;
        margin-bottom: 50px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed;
    }

    th,
    td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: center;
    }

    .even-row {
        background-color: #f0f0f0;
        color: #000;
    }

    .odd-row {
        background-color: #d0d0d0;
    }

    .selected-row {
        background-color: rgb(23, 12, 39);
        color: white;
    }

    .patient-buttons {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2em;
    }

    .book-button {
        background-color: #f0f0f0;
        border: none;
        color: #333;
        padding: 10px;
        width: auto;
        text-align: center;
        cursor: pointer;
        border-radius: 5px;
        margin: 5px;
        line-height: 19px;
        transition: background-color 0.3s, color 0.3s;
    }

    .book-button:hover {
        background-color: #666;
        color: #fff;
    }

    .header-row {
        background-color: #333;
        font-weight: bold;
        color: #fff;
    }

    .search-input {
        margin-left: 3em;
    }

    .edit-button:hover {
        background-color: #292222;
        color: #fff;
    }

    .delete-button:hover:hover {
        background-color: #8c2424;
        color: #fff;
    }
</style>

@code {
    private List<Patient> patients = new List<Patient>
{
new Patient { PatientID = 1, LastName = "Doe", FirstName = "John", MiddleName = "Jake", Address = "123 Main St",
Province = "BC", City = "Richmond", PostalCode = "V6Y9U4", BirthDate = "1990-01-01", PHN = "9812714728", Phone =
"123-456-7890", Email = "johndoe@example.com", Occupation = "Engineer", ImageID = "VXE1" },
new Patient { PatientID = 2, LastName = "Smith", FirstName = "Jane", MiddleName = "Amber", Address = "456 Elm St",
Province = "BC", City = "Burnaby", PostalCode = "V8Y1X3", BirthDate = "1985-05-15", PHN = "9843926834", Phone =
"987-654-3210", Email = "janesmith@example.com", Occupation = "Doctor", ImageID = "VXE2" }
};

    private List<VisionX.Models.Patient> patientsTest;

    private VisionX.Models.Patient selectedPatient;

    protected override void OnInitialized()
    {
        patientsTest = dbContext.Patients.ToList();
    }

    private int nextPatientID = 3;
    private bool isEditing = false;
    private string editButtonText = "Edit";
    private bool showPatientInfo = false;

    public bool patientEdit = false;

    public bool patientAdd = false;

    private void ShowPatientInfoModal()
    {
        showPatientInfo = true;
        patientAdd = true;
        patientEdit = false;
    }

    private void HandleSave()
    {
        // Handle the save action here

        showPatientInfo = false;
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void HandleCancel()
    {
        showPatientInfo = false;
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private void AddPatient()
    {
        patients.Add(new Patient { PatientID = nextPatientID });
        nextPatientID++;
    }

    private void SelectRow(VisionX.Models.Patient patient)
    {
        foreach (var p in patientsTest)
        {
            p.IsSelected = false;
        }

        patient.IsSelected = true;
    }


    private void EditRow(Patient patient)
    {
        if (isEditing)
        {
            patient.IsEditing = true;
        }
    }

    private void SaveRow(Patient patient)
    {
        if (isEditing)
        {
            patient.IsEditing = false;
        }
    }

    private void EditPatient(VisionX.Models.Patient patient)
    {
        Console.WriteLine(patient.PatientID);
        selectedPatient = patient;
        patientEdit = true;
        patientAdd = false;
        showPatientInfo = true;
    }

    private async void DeletePatient(VisionX.Models.Patient patient)
    {
        Console.WriteLine(patient.PatientID);
        await _patientService.DeletePatientAsync(patient.PatientID);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }

    public class Patient
    {
        public int PatientID { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public string MiddleName { get; set; }
        public string Address { get; set; }
        public string Province { get; set; }
        public string City { get; set; }
        public string PostalCode { get; set; }
        public string BirthDate { get; set; }
        public string PHN { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string Occupation { get; set; }
        public string ImageID { get; set; }

        public bool IsSelected { get; set; }
        public bool IsEditing { get; set; }
    }
}