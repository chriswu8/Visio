@inject VisionX.Services.PatientService PatientService
@using VisionX.Models
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Hosting;
@using System.IO;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env



<div class="patient-info">
    <div class="input-row">
        <div class="input-label last-name-div">Last Name:</div>
        <input id="lastNameInput" class="input-field last-name-input" type="text" />
    </div>
    <div class="input-row">
        <div class="input-label first-name-div">First Name:</div>
        <input id="firstNameInput" class="input-field first-name-input" type="text" />
    </div>
    <div class="info-columns">
        <div class="left-column">
            <div class="input-row">
                <div class="input-label">Address:</div>
                <input id="addressInput" class="input-field" type="text" />
            </div>
            <div class="input-row">
                <div class="input-label">City:</div>
                <input id="cityInput" class="input-field" type="text" />
            </div>
            <div class="input-row">
                <div class="input-label">Birthday Date:</div>
                <input id="birthDateInput" class="input-field" type="date" />
            </div>
            <div class="input-row">
                <div class="input-label">Phone:</div>
                <input id="phoneInput" class="input-field" type="tel" />
            </div>
            <div class="input-row">
                <div class="input-label">E-mail:</div>
                <input id="emailInput" class="input-field" type="email" />
            </div>
            <div class="input-row">
                <div class="input-label">Occupation:</div>
                <input id="occupationInput" class="input-field" type="text" />
            </div>
            <div class="input-row">
                <div class="input-label">Last Visit:</div>
                <input id="lastVisitInput" class="input-field" type="date" />
            </div>
            <div class="input-row">
                <div class="input-label">First Visit:</div>
                <input id="firstVisitInput" class="input-field" type="date" />
            </div>
        </div>
        <div class="right-column">
            <div class="input-row middle-name-row">
                <div class="input-label middle-name-div">Middle Name:</div>
                <input id="middleNameInput" class="input-field middle-name-input" type="text" />
            </div>
            <div class="input-row">
                <div class="input-label">Province:</div>
                <input id="provinceInput" class="input-field" type="text" />
            </div>
            <div class="input-row">
                <div class="input-label">Postal Code:</div>
                <input id="postalCodeInput" class="input-field" type="text" />
            </div>
            <div class="input-row">
                <div class="input-label">PHN:</div>
                <input id="phnInput" class="input-field" type="text" />
            </div>
            <div class="input-row">
                <div class="input-label">Insurance:</div>
                <input id="insuranceInput" class="input-field" type="text" />
            </div>
            <div class="input-row">
                <div class="input-label">Misc:</div>
                <input id="miscInput" class="input-field" type="text" />
            </div>
        </div>
    </div>
    <div class="buttons">
        <button class="save-button-info-save" @onclick="OnSave">Add Patient</button>
        <button class="cancel-button-info-save" @onclick="OnCancel">Cancel</button>
    </div>
</div>

<style>
    .patient-info {
        padding: 20px;

    }

    .input-row {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .input-label {
        width: 20%;
        text-align: left;
        margin-right: 10px;
    }

    .input-field {
        width: 75%;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .info-columns {
        display: flex;
        justify-content: space-between;
    }

    .left-column,
    .right-column {
        width: 48%;
    }

    .buttons {
        display: flex;
        justify-content: right;
        margin-top: -40px;
        justify-content: flex-end;
    }

    .save-button-info-save,
    .cancel-button-info-save {
        background-color: #333;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
    }

    .save-button-info-save {
        margin-left: 1000px;
    }

    .cancel-button-info-save {
        margin-left: 10px;
    }

    .save-button-info-save:hover,
    .cancel-button-info-save:hover {
        background-color: #666;
    }

    .last-name {
        max-width: 40vw;
        width: 100%;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        text-align: left;
    }

    .last-name-div {
        margin-right: -111px;
    }

    .last-name-input {
        max-width: 425px;
    }

    .first-name-div {
        margin-right: -111px;
    }

    .first-name-input {
        max-width: 425px;
    }

    .middle-name-row {
        margin-top: -90px;
        margin-bottom: 100px;
    }

    .middle-name-input {
        max-width: 425px;
    }
</style>

@code {
    // Define event callbacks
    [Parameter] public EventCallback OnSaveClicked { get; set; }
    [Parameter] public EventCallback OnCancelClicked { get; set; }

    [Parameter]
    public VisionX.Models.Patient SelectedPatient { get; set; } = new VisionX.Models.Patient();

    @* [Parameter]
public bool PatientEdit { get; set; } *@


    private async Task CreateFolder(string folderName)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("createFolder", folderName);
            Console.WriteLine("Folder created =======================================================================");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

    }


    // Event handlers
    private async Task OnSave()
    {
        // Emit the OnSaveClicked event
        @* await PatientService.UpdatePatientAsync(SelectedPatient);
await OnSaveClicked.InvokeAsync(); *@

        string lastNameInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('lastNameInput').value");
        string firstNameInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('firstNameInput').value");
        string addressInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('addressInput').value");
        string cityInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('cityInput').value");
        string birthDateInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('birthDateInput').value");
        string phoneInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('phoneInput').value");
        string emailInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('emailInput').value");
        string occupationInput = await JSRuntime.InvokeAsync<string>("eval",
        "document.getElementById('occupationInput').value");
        string lastVisitInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('lastVisitInput').value");
        string firstVisitInput = await JSRuntime.InvokeAsync<string>("eval",
        "document.getElementById('firstVisitInput').value");
        string middleNameInput = await JSRuntime.InvokeAsync<string>("eval",
        "document.getElementById('middleNameInput').value");
        string provinceInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('provinceInput').value");
        string postalCodeInput = await JSRuntime.InvokeAsync<string>("eval",
        "document.getElementById('postalCodeInput').value");
        string phnInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('phnInput').value");
        string insuranceInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('insuranceInput').value");
        string miscInput = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('miscInput').value");

        Patient patient = new Patient()
            {
                LastName = lastNameInput,
                FirstName = firstNameInput,
                MiddleName = middleNameInput,
                Address = addressInput,
                Province = provinceInput,
                City = cityInput,
                PostalCode = postalCodeInput,
                ProvincialHealthNumber = phnInput,
                Phone = phoneInput,
                Email = emailInput,
                Occupation = occupationInput,
                IsSelected = false,
                IsEditing = false
            };

        await PatientService.AddPatientAsync(patient);

        @* CreateFolder($"{patient.LastName}_{patient.FirstName}_{patient.ProvincialHealthNumber}"); *@
        var folderName = $"{patient.LastName}_{patient.FirstName}_{patient.ProvincialHealthNumber}";
        var ocularScansFolder = "OcularScans";
        var path = Path.Combine(env.WebRootPath, ocularScansFolder, folderName);
        Directory.CreateDirectory(path);

        await OnSaveClicked.InvokeAsync();
    }

    private async Task OnCancel()
    {
        Console.WriteLine("Cancel button clicked.");

        // Emit the OnCancelClicked event
        await OnCancelClicked.InvokeAsync();
    }
}