@inject VisionX.Services.ServicesService ServicesService
@using VisionX.Models
@inject Microsoft.JSInterop.IJSRuntime JSRuntime


<!-- TheAddNewService.razor -->
<div class="payment-modal">
    <div class="left-payment-panel">

        <div class="input-container">
            <h4 class="small-text">Code of new Service</h4>
            <input type="text" class="input-field" placeholder="Enter Service ID" id="serviceIdInput"
                @bind="SelectedService.Code" />
        </div>

        <div class="input-container">
            <h4 class="small-text">Service Fee required</h4>
            <input type="text" class="input-field" placeholder="Enter Service Fee" id="serviceFeeInput"
                @bind="SelectedService.Fee" />
        </div>

        <div class="input-container">
            <h4 class="small-text">Service Description required</h4>
            <input type="text" class="input-field" placeholder="Enter details of new Service"
                id="serviceDescriptionInput" @bind="SelectedService.Description" />
        </div>
    </div>

    <div class="right-payment-panel">
        <div class="black-box">
            <div class="payment-summary">
                <h3>Edit New Service Summary</h3>
            </div>
            <div class="summary-details">
                <div class="left-column">
                    <p>ServiceID:</p>
                    <p>Fee:</p>
                    <p>Service Description:</p>

                </div>
                <div class="right-column">
                    <p>@SelectedService.Code</p>
                    <p>@SelectedService.Fee</p>
                    <p>@SelectedService.Description</p>

                </div>
            </div>
        </div>

        <div class="buttons">
            <button class="visionX-button payment-save-button" @onclick="SaveService">Save</button>
            <button class="visionX-button payment-exit-button" @onclick="HidePaymentModal">Exit</button>
        </div>
    </div>
</div>

<style>
    .payment-modal {
        display: flex;
        background-color: #ddd;
        color: #000;
    }

    .left-payment-panel {
        width: 47%;
        padding: 20px;
    }

    .right-payment-panel {
        width: 53%;
        padding: 20px;
    }

    .black-box {
        background-color: #000;
        color: #fff;
        min-width: 200px;
        min-height: 125px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }


    .small-text {
        font-size: 12px;
    }

    .input-field {
        width: 250px;
        padding: 5px;
        margin-top: 5px;
    }

    select.input-field {
        width: 250px;
        padding: 5px;
        margin-top: 5px;
    }

    .small-input {
        width: 80px;
        height: 30px;
        text-align: right;
    }

    .red-text {
        color: red;
    }

    .payment-summary {
        text-align: center;
        margin: 10px;
    }

    .summary-details {
        display: flex;
        justify-content: space-between;
        margin: 25px;
        gap: 125px;
    }

    .left-column,
    .right-column {
        width: 35%;
    }

    .buttons {
        margin-top: 20px;
        display: flex;
    }

    .payment-save-button {
        margin-right: 10px;
        /* Add some spacing between the buttons */
    }

    .input-container {
        display: flex;
        flex-direction: column;
        margin-bottom: 10px;
        /* Adjust the margin as needed */
    }
</style>

@code {
    [Parameter] public EventCallback OnExitPaymentClicked { get; set; }
    [Parameter] public EventCallback OnSavePaymentClicked { get; set; }

    [Parameter]
    public VisionX.Models.Service SelectedService { get; set; }
    private bool showPaymentModal;

    private ElementReference serviceIdInput;
    private ElementReference serviceFeeInput;
    private ElementReference serviceDescriptionInput;


    private async Task HidePaymentModal()
    {
        //Emit the OnCancelClicked event
        await OnExitPaymentClicked.InvokeAsync();
    }


    private async Task SaveService()
    {
        string serviceId = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('serviceIdInput').value");
        string serviceFee = await JSRuntime.InvokeAsync<string>("eval", "document.getElementById('serviceFeeInput').value");
        string serviceDescription = await JSRuntime.InvokeAsync<string>("eval",
        "document.getElementById('serviceDescriptionInput').value");

        // Create a new exam object using the user-entered values
        Service newService = new Service
            {

                Code = serviceId,
                Fee = Int32.Parse(serviceFee),
                Description = serviceDescription
            };

        // Use ExamService to add the new exam
        ServicesService.EditService(SelectedService.Id, newService);

        // Emit the OnSavePaymentClicked event
        await OnSavePaymentClicked.InvokeAsync();
    }
}