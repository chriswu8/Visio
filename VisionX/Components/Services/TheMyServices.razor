@using VisionX.Models
@using Microsoft.EntityFrameworkCore
@inject VisionX.Services.ServicesService ServicesService
@inject Data.ApplicationDbContext dbContext
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<link rel="stylesheet" href="/css/site.css" />

<div class="service-buttons">
    <div class="service-buttons2">
        <button class="service-button" @onclick="ModifyService">Add Service</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(deleteErrorMessage))
{
    <div class="alert alert-danger">
        @deleteErrorMessage
    </div>
}

<div class="MyServicesTable">
    <table>
        <thead>
            <tr class="header-row">
                <th>Service Code</th>
                <th>Fee</th>
                <th>Service Description</th>
                <th colspan="2">Actions</th>
            </tr>
        </thead>
        @* Links the Services ID to the database data based off of the implementation from ThePatient.razor *@

        <tbody>

            @foreach (var service in servicesTest)
            {

                <tr class="servicesTable-background">

                    <td>@service.Code</td>
                    <td>@service.Fee</td>
                    <td>@service.Description</td>
                    <td>
                        <button @onclick="() => EditAService(service)" class="edit-button">Edit</button>
                    </td>
                    <td>
                        <button @onclick="() => DeleteAService(service)" class="delete-button">Delete</button>
                    </td>
                </tr>
            }

        </tbody>

    </table>
    <!--modifyService-->
    @if (addAService)
    {
        <!-- Modal overlay -->
        <div class="modal-overlay">
            <!-- TheModifyService (Services) modal component -->
            <TheAddNewService OnSavePaymentClicked="HandleAddAServiceSave" OnExitPaymentClicked="HandleAddAServiceExit" />
        </div>
    }
    else if (editAService)
    {
        <div class="modal-overlay">
            <!-- TheInvoice modal component -->
            <TheEditNewService OnSavePaymentClicked="HandleEditAServiceSave" OnExitPaymentClicked="HandleEditAServiceExit"
                SelectedService="selectedService" />
        </div>
    }

</div>



@* CSS Styling *@

<style>
    .servicesTable-background {
        background-color: white;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        /* Adjust z-index as needed */
    }

    .modal-container {
        transform: scale(0.9);
        /* Adjust the scale factor as needed */
        transform-origin: center;
        transition: transform 0.3s;
    }

    .modal-background {
        background-color: rgba(0, 0, 0, 0.5);
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
    }

    /* Add this for smooth scaling on hover */
    .modal-container:hover {
        transform: scale(1);
    }


    .MyServicesTable {
        margin-top: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }


    table {
        width: 100%;
        border-collapse: collapse;
    }


    th,
    td {
        border: 1px solid #ccc;
        padding: 8px;
        text-align: center;
    }

    .header-row {
        background-color: #000000;
        font-weight: bold;
        color: #fff;
    }

    .even-row {
        background-color: #f0f0f0;
        color: #000;
    }

    .odd-row {
        background-color: #d0d0d0;
    }

    .selected-row {
        background-color: red;
        color: white;
    }

    .header-row {
        background-color: #333;
        font-weight: bold;
        color: #fff;
    }

    .service-button {
        /* Style the action buttons */
        background-color: #f0f0f0;
        border: none;
        color: #333;
        padding: 10px;
        width: auto;
        text-align: center;
        cursor: pointer;
        border-radius: 5px;
        margin: 5px;
        line-height: 19px;
        transition: background-color 0.3s, color 0.3s;
    }

    .service-button:hover {
        background-color: #666;
        color: #fff;
    }

    .service-buttons {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2em;
    }
</style>

@code {
    // modifyService
    private bool modifyService = false;
    //ModifyService

    private bool addAService = false;

    private string deleteErrorMessage;

    private void ModifyService()
    { // modif
        addAService = true;
    }

    private void HandleExit()
    {
        // Handle the save action here

        modifyService = false;
    }

    private bool editAService = false;

    private VisionX.Models.Service selectedService;

    private void EditAService(VisionX.Models.Service service)
    {
        selectedService = service;
        editAService = true;
    }

    private async Task DeleteAService(VisionX.Models.Service service)
    {
        try
        {
            await ServicesService.DeleteExam(service.Id);
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        catch (InvalidOperationException ex)
        {
            // Rethrow the exception to propagate it to the calling code
            deleteErrorMessage = $"This service can't be deleted! {ex.Message}";
        }

    }

    private List<Service> services = new List<Service>
{
new Service {ServiceID = 101, Fee = "$20", ServiceDescription = "Eye Pressure Test"},
new Service {ServiceID = 202, Fee = "$100", ServiceDescription = "Glaucoma Exam"}
};

    private List<VisionX.Models.Service> servicesTest;

    protected override void OnInitialized()
    {
        servicesTest = dbContext.Services.ToList();
    }

    private void HandleEditAServiceExit()
    {
        editAService = false;
        StateHasChanged();
    }

    // Handle the save action here
    private void HandleEditAServiceSave()
    {
        editAService = false;
        StateHasChanged();
    }


    public class Service
    {
        public int ServiceID { get; set; }
        public string Fee { get; set; }
        public string ServiceDescription { get; set; }

        public bool IsSelected { get; set; }
        public bool IsEditing { get; set; }
    }


    private void SelectRow(Service service)
    {
        foreach (var s in services)
        {
            s.IsSelected = false;
        }

        service.IsSelected = !service.IsSelected;
    }

    private void HandleAddAServiceExit()
    {
        addAService = false;
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    // Handle the save action here
    private void HandleAddAServiceSave()
    {
        addAService = false;
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}
